#!/usr/bin/env node
var sys = require('sys');

var colors = require('colors'),
    httpServer = require('./server.js'),
    argv = require('optimist').argv,
    portfinder = require('portfinder');
// console.log(colors);

if (argv.h || argv.help) {
    console.log([
        "usage: http-server [path] [options]",
        "",
        "options:",
        "  -p --port          Port to use [HTTPSERVER_PORT || 8080]",
        "  -a --address       Address to use [HTTPSERVER_IPADDR || 0.0.0.0]",
        "  -d --dir           Don't show directory contents",
        "  -i --index         Show index.htm[l] when present in directory",
        "  -f --forward       Forward url/prefix to target",
        "  --prefix          [db]",
        "  --target          [http://localhost:5984]",
        // "  -e          Default file extension if none supplied [none]",
        // "  -c               Cache control in seconds",
        // "  -h               Response headers",
        // "  -g              Gzip if possible",
        "  -s --silent        Suppress log messages from output",
        "  -h --help          Print this list and exit."
    ].join('\n'));
  process.exit();
}

function readConfigFile(fileName) {
    var parsedJSON;
    try { parsedJSON = require(fileName);
          // console.log('Config file read.', parsedJSON);
        } catch (e) {
            console.log('Error reading config file: ', e);
        }
    return parsedJSON;
} 

// function slashit(str) {
//     str = '/' + str + '/';
// }

if (argv.file) {
    argv = readConfigFile(argv.file);
    console.log(argv);
}
else {
    if (argv.f || argv.forward) {
        argv.forward = [ {
            prefix: argv.prefix || 'db',
            target: argv.target || 'http://localhost:5984'
        } ];
    } 
}

var port = argv.p || argv.port || Number(process.env.HTTPSERVER_PORT),
    host = argv.a || argv.address || process.env.HTTPSERVER_IPADDR || '0.0.0.0',
    log = (argv.s || argv.silent) ? (function () {}) : console.log;

if (!argv.p) {
    portfinder.basePort = 8080;
    portfinder.getPort(function (err, port) {
        if (err) throw err;
        listen(port);
    });
} else {
  listen(port);
}

function getOptionString(o) {
    return (o ? 'yes'.green : 'no'.red) ;
}


function listen(port) {
    argv = {
        root: (argv._ && argv._[0]) || argv.root || './',
        dir: !(argv.d || !argv.dir),
        index: argv.i || argv.index,
        gzip: argv.g || argv.gzip,
        forward: argv.forward,
        // headers
        cache: argv.c || argv.cache,
        ext: argv.e || argv.ext,
	silent: argv.s || argv.silent};
            
    var server = httpServer.createServer(argv);
    
    server.listen(port, host, function() {
        log('Starting up http-server, serving '.yellow
            + server.root.cyan
            + ' on: '.yellow +
            (host + ':' + port).cyan);
        log('Listing dir contents : '.grey + getOptionString(argv.dir));
        log('Auto show index.htm[l]: '.grey + getOptionString(argv.index));
        log('Forward '.grey + getOptionString(argv.forward));//
        if (argv.forward) console.log(argv.forward);
        // log('Hit CTRL-C to stop the server');
    });
}

if (process.platform !== 'win32') {
  //
  // Signal handlers don't work on Windows.
  //
  process.on('SIGINT', function () {
    log('http-server stopped.'.red);
    process.exit();
  });
}
